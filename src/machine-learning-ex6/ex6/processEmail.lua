---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by shuieryin.
--- DateTime: 12/01/2018 9:31 PM
---

local regex = require 'rex_posix'
local stem = require "stem"

function processEmail(email_contents)
    --PROCESSEMAIL preprocesses a the body of an email and
    --returns a list of word_indices
    --   word_indices = PROCESSEMAIL(email_contents) preprocesses
    --   the body of an email and returns a list of indices of the
    --   words contained in the email.

    -- Load Vocabulary
    local vocabList = getVocabList()

    -- Init return value
    local word_indices = {}

    -- ========================== Preprocess Email ===========================

    -- Find the Headers ( \n\n and remove )
    -- Uncomment the following lines if you are working with raw emails with the
    -- full headers

    -- hdrstart = strfind(email_contents, ([char(10) char(10)]));
    -- email_contents = email_contents(hdrstart(1):end);

    -- Lower case
    email_contents = email_contents:lower()

    -- Strip all HTML
    -- Looks for any expression that starts with < and ends with > and replace
    -- and does not have any < or > in the tag it with a space
    email_contents = email_contents:gsub('<[^<>]+>', ' ')

    -- Handle Numbers
    -- Look for one or more characters between 0-9
    email_contents = email_contents:gsub('[0-9]+', 'number')

    -- Handle URLS
    -- Look for strings starting with http:// or https://
    email_contents = regex.gsub(email_contents, '(http|https)://[a-z%./]*', 'httpaddr')

    -- Handle Email Addresses
    -- Look for strings with @ in the middle
    email_contents = email_contents:gsub('[^%s]+@[^%s]+', 'emailaddr')

    -- Handle $ sign
    email_contents = email_contents:gsub('[$]+', 'dollar')

    -- ========================== Tokenize Email ===========================

    -- Output the email to screen as well
    print('==== Processed Email ====')

    local tokenizer = "[%s@$/#.-:&*+=[%]?!(){},'>_<;\n%%]"
    while email_contents ~= nil and email_contents ~= "" do

        -- Tokenizes and also get rid of any punctuation
        -- and Remove any non alphanumeric characters
        local str = email_contents:match("^([%w%d]*)" .. tokenizer .. "+") or ""
        email_contents = email_contents:match(tokenizer .. "+(.*)$")

        -- Stem the word
        -- (the porterStemmer sometimes has issues, so we use a try catch block)
        str = stem.stem(str)
        -- Skip the word if it is too short

        if str:len() > 0 then
            -- Look up the word in the dictionary and add to word_indices if
            -- found
            -- ====================== YOUR CODE HERE ======================
            -- Instructions: Fill in this function to add the index of str to
            --               word_indices if it is in the vocabulary. At this point
            --               of the code, you have a stemmed word from the email in
            --               the variable str. You should look up str in the
            --               vocabulary list (vocabList). If a match exists, you
            --               should add the index of the word to the word_indices
            --               vector. Concretely, if str = 'action', then you should
            --               look up the vocabulary list to find where in vocabList
            --               'action' appears. For example, if vocabList{18} =
            --               'action', then, you should add 18 to the word_indices
            --               vector (e.g., word_indices = [word_indices ; 18]; ).
            --
            -- Note: vocabList{idx} returns a the word with index idx in the
            --       vocabulary list.
            --
            -- Note: You can use strcmp(str1, str2) to compare two strings (str1 and
            --       str2). It will return 1 only if the two strings are equivalent.
            --

            -- =============================================================

            local index = vocabList[str]
            if index ~= nil then
                word_indices[#word_indices + 1] = index
            end
            io.write(str .. " ")
        end
    end

    -- Print footer
    print('\n=========================\n')

    return word_indices
end