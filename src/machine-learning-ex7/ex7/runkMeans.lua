---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by shuieryin.
--- DateTime: 12/01/2018 10:17 PM
---

local Plot = require 'itorch.Plot'

local color = { 'red', 'green', 'blue' }
function runkMeans(X, initial_centroids, max_iters, isPlot)
    --RUNKMEANS runs the K-Means algorithm on data matrix X, where each row of X
    --is a single example
    --   [centroids, idx] = RUNKMEANS(X, initial_centroids, max_iters, ...
    --   plot_progress) runs the K-Means algorithm on data matrix X, where each
    --   row of X is a single example. It uses initial_centroids used as the
    --   initial centroids. max_iters specifies the total number of interactions
    --   of K-Means to execute. plot_progress is a true/false flag that
    --   indicates if the function should also plot its progress as the
    --   learning happens. This is set to false by default. runkMeans returns
    --   centroids, a Kxn matrix of the computed centroids and idx, a m x 1
    --   vector of centroid assignments (i.e. each entry in range [1..K])

    -- Plot the data if we are plotting progress

    -- Initialize values
    local m = X:size(1)
    local n = X:size(2)
    local K = initial_centroids:size(1)
    local centroids = initial_centroids
    local previous_centroids = centroids
    local idx = torch.zeros(m, 1)

    -- Run K-Means
    for i = 1, max_iters do

        -- Output progress
        print('K-Means iteration', i, max_iters)

        -- For each example in X, assign it to the closest centroid
        idx = findClosestCentroids(X, centroids)

        -- Optionally, plot progress here
        if isPlot == true then
            local plot = Plot()
            plot:title('K-Means iteration' .. i)
            plot:xaxis('X1'):yaxis('X2')
            for j = 1, K do
                local curMuData = X[idx:eq(j):expand(idx:size(1), n)]
                if curMuData:dim() > 0 then
                    curMuData = torch.reshape(curMuData, curMuData:size(1) / n, n)
                    plot:circle(curMuData[{ {}, 1 }], curMuData[{ {}, 2 }], color[j], 'Data' .. j)
                end
            end
            plot:circle(centroids[{ {}, 1 }], centroids[{ {}, 2 }], 'black', 'Centroid')
            plot:legend(true):redraw()
            itorchHtml(plot, 'K-MeansIteration.html')
            print('Open "K-MeansIteration.html to check')
            print('Press enter to continue.')
            io.read()
        end

        previous_centroids = centroids;


        -- Given the memberships, compute new centroids
        centroids = computeCentroids(X, idx, K)
    end

    return centroids, idx
end