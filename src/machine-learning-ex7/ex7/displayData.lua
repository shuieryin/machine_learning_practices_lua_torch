---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by shuieryin.
--- DateTime: 12/01/2018 10:19 PM
---

function displayData(X, filename, example_width)
    --DISPLAYDATA Display 2D data in a nice grid
    --   [h, display_array] = DISPLAYDATA(X, example_width) displays 2D data
    --   stored in X in a nice grid. It returns the figure handle h and the
    --   displayed array if requested.

    -- Set example_width automatically if not passed in
    if example_width == nil then
        example_width = math.floor(math.sqrt(X:size(2)))
    end

    -- Compute rows, cols
    local m = X:size(1)
    local n = X:size(2)
    local example_height = n / example_width

    -- Compute number of items to display
    local display_rows = math.floor(math.sqrt(m))
    local display_cols = math.ceil(m / display_rows)

    -- Between images padding
    local pad = 1

    -- Setup blank display
    local display_array = -torch.ones(pad + display_rows * (example_height + pad), pad + display_cols * (example_width + pad))

    -- Copy each example into a patch on the display array
    local curr_ex = 1
    for j = 1, display_rows do
        for i = 1, display_cols do
            if curr_ex > m then
                break
            end
            -- Copy the patch

            -- Get the max value of the patch
            local max_val = torch.max(torch.abs(X[curr_ex]))
            local curMRange = pad + (i - 1) * (example_height + pad)
            local curNRange = pad + (j - 1) * (example_width + pad)
            local curImage = torch.reshape(X[curr_ex], example_height, example_width) / max_val
            display_array[{ { 1 + curMRange, example_height + curMRange }, { 1 + curNRange, example_width + curNRange } }] = curImage
            curr_ex = curr_ex + 1
        end
        if curr_ex > m then
            break
        end
    end

    -- Display Image
    image.save(filename, image.toDisplayTensor {
        input = display_array:t()
    })
    os.execute(openCmd .. ' "' .. paths.cwd() .. '/' .. filename .. '"')

    return display_array
end