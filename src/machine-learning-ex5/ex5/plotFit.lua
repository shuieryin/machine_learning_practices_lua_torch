---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by shuieryin.
--- DateTime: 12/01/2018 9:15 PM
---

function plotFit(min_x, max_x, mu, sigma, theta, p)
    local X, y, Xval, yval, Xtest, ytest, plot = loadData()
    --PLOTFIT Plots a learned polynomial regression fit over an existing figure.
    --Also works with linear regression.
    --   PLOTFIT(min_x, max_x, mu, sigma, theta, p) plots the learned polynomial
    --   fit with power p and feature normalization (mu, sigma).

    -- We plot a range slightly bigger than the min and max values to get
    -- an idea of how the fit will vary outside the range of the data points
    local x = torch.range(min_x - 15, max_x + 25, 0.05)
    x = torch.reshape(x, x:numel(), 1)

    -- Map the X values
    local X_poly = polyFeatures(x, p)
    X_poly = bsxfun(minus, X_poly, mu)
    X_poly = bsxfun(rdivide, X_poly, sigma)

    -- Add ones
    X_poly = torch.ones(x:size(1), 1):cat(X_poly, 2)

    -- Plot
    if tostring(X_poly[1][2]) == "nan" then
        X_poly[{ {}, { 2, X_poly:size(2) } }] = 0
    end
    plot:line(x:totable(), (X_poly * theta):totable(), 'blue', 'Decision boundary')
    plot:title('Polynomial Regression Fit (lambda = 0.000000)'):redraw()
    itorchHtml(plot, 'figure4.html')
end