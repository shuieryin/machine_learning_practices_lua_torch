---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by shuieryin.
--- DateTime: 12/01/2018 4:20 PM
---

function gradientDescent(X, y, theta, alpha, num_iters)
    --GRADIENTDESCENT Performs gradient descent to learn theta
    --   theta = GRADIENTDESCENT(X, y, theta, alpha, num_iters) updates theta by
    --   taking num_iters gradient steps with learning rate alpha

    -- Initialize some useful values
    local m = length(y) -- number of training examples
    local J_history = {}

    for iter = 1, num_iters do

        -- ====================== YOUR CODE HERE ======================
        -- Instructions: Perform a single gradient step on the parameter vector
        --               theta.
        --
        -- Hint: While debugging, it can be useful to print out the values
        --       of the cost function (computeCost) and gradient here.
        --


        -- ============================================================

        -- Save the cost J in every iteration
        J_history[#J_history + 1] = computeCost(X, y, theta)
    end

    return theta, J_history
end