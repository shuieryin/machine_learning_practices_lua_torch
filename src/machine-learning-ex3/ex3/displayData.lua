---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by shuieryin.
--- DateTime: 12/01/2018 8:39 PM
---

function displayData(X, example_width)
    --DISPLAYDATA Display 2D data in a nice grid
    --   [h, display_array] = DISPLAYDATA(X, example_width) displays 2D data
    --   stored in X in a nice grid. It returns the figure handle h and the
    --   displayed array if requested.
    local m = X:size(1)
    local n = X:size(2)

    -- Set example_width automatically if not passed in
    if type(example_width) ~= "table" or #example_width == 0 then
        example_width = math.floor(math.sqrt(n))
    end

    -- Gray Image
    --colormap(gray)

    -- Compute rows, cols
    local example_height = (n / example_width)

    -- Compute number of items to display
    local display_rows = math.floor(math.sqrt(m))
    local display_cols = math.ceil(m / display_rows)

    -- Between images padding
    local pad = 1

    -- Setup blank display
    local display_array = -torch.ones(pad + display_rows * (example_height + pad), pad + display_cols * (example_width + pad))

    -- Copy each example into a patch on the display array
    local curr_ex = 1
    local max_val
    for j = 1, display_rows do
        for i = 1, display_cols do
            if curr_ex > m then
                break
            end
            -- Copy the patch

            -- Get the max value of the patch
            local curData = X[{ curr_ex, {} }]
            max_val = torch.max(torch.abs(curData))
            local targetM = pad + (j - 1) * (example_height + pad) + torch.range(1, example_height)
            local targetN = pad + (i - 1) * (example_width + pad) + torch.range(1, example_width)
            local reshaped = torch.reshape(curData, example_height, example_width) / max_val
            display_array[{ { targetM[1], targetM[#targetM] }, { targetN[1], targetN[#targetN] } }] = reshaped:t()
            curr_ex = curr_ex + 1
        end
        if curr_ex > m then
            break
        end
    end

    return display_array
end